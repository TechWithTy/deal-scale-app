{"version":3,"file":"testing.js","names":[],"sources":["../../src/adapters/testing.ts"],"sourcesContent":["import { createElement, type ReactElement, type ReactNode } from 'react'\nimport { resetQueues } from '../lib/queues/reset'\nimport { renderQueryString } from '../lib/url-encoding'\nimport { type AdapterProps, context } from './lib/context'\nimport type { AdapterInterface, AdapterOptions } from './lib/defs'\n\nexport type UrlUpdateEvent = {\n  searchParams: URLSearchParams\n  queryString: string\n  options: Required<AdapterOptions>\n}\n\nexport type OnUrlUpdateFunction = (event: UrlUpdateEvent) => void\n\ntype TestingAdapterProps = {\n  searchParams?: string | Record<string, string> | URLSearchParams\n  onUrlUpdate?: OnUrlUpdateFunction\n  rateLimitFactor?: number\n  resetUrlUpdateQueueOnMount?: boolean\n  children: ReactNode\n} & AdapterProps\n\nexport function NuqsTestingAdapter({\n  resetUrlUpdateQueueOnMount = true,\n  defaultOptions,\n  ...props\n}: TestingAdapterProps): ReactElement {\n  if (resetUrlUpdateQueueOnMount) {\n    resetQueues()\n  }\n  const useAdapter = (): AdapterInterface => ({\n    searchParams: new URLSearchParams(props.searchParams),\n    updateUrl(search, options) {\n      props.onUrlUpdate?.({\n        searchParams: search,\n        queryString: renderQueryString(search),\n        options\n      })\n    },\n    getSearchParamsSnapshot() {\n      return new URLSearchParams(props.searchParams)\n    },\n    rateLimitFactor: props.rateLimitFactor ?? 0\n  })\n  return createElement(\n    context.Provider,\n    { value: { useAdapter, defaultOptions } },\n    props.children\n  )\n}\n\n/**\n * A higher order component that wraps the children with the NuqsTestingAdapter\n *\n * It allows creating wrappers for testing purposes by providing only the\n * necessary props to the NuqsTestingAdapter.\n *\n * Usage:\n * ```tsx\n * render(<MyComponent />, {\n *   wrapper: withNuqsTestingAdapter({ searchParams: '?foo=bar' })\n * })\n * ```\n */\nexport function withNuqsTestingAdapter(\n  props: Omit<TestingAdapterProps, 'children'> = {}\n) {\n  return function NuqsTestingAdapterWrapper({\n    children\n  }: {\n    children: ReactNode\n  }): ReactElement {\n    return createElement(\n      NuqsTestingAdapter,\n      // @ts-expect-error - Ignore missing children error\n      props,\n      children\n    )\n  }\n}\n"],"mappings":";;;;;;;;AAsBA,SAAgB,mBAAmB,EACjC,6BAA6B,MAC7B,eACA,GAAG,OACiB,EAAgB;AACpC,KAAI,2BACF;CAEF,MAAM,oBAAsC;EAC1C,cAAc,IAAI,gBAAgB,MAAM;EACxC,UAAU,QAAQ,SAAS;AACzB,SAAM,cAAc;IAClB,cAAc;IACd,aAAa,kBAAkB;IAC/B;IACD;EACF;EACD,0BAA0B;AACxB,UAAO,IAAI,gBAAgB,MAAM;EAClC;EACD,iBAAiB,MAAM,mBAAmB;EAC3C;AACD,QAAO,cACL,QAAQ,UACR,EAAE,OAAO;EAAE;EAAY;EAAgB,EAAE,EACzC,MAAM;AAET;;;;;;;;;;;;;;AAeD,SAAgB,uBACd,QAA+C,EAAE,EACjD;AACA,QAAO,SAAS,0BAA0B,EACxC,UAGD,EAAgB;AACf,SAAO,cACL,oBAEA,OACA;CAEH;AACF"}